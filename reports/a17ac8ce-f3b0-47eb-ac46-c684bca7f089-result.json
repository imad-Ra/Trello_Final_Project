{"name": "test_login_successful", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_login_valid_account.SuccessfulLoginTest testMethod=test_login_successful>\n\n    @allure.story(\"Successful Login\")\n    def test_login_successful(self):\n        logging.info(\"Successful Login Test\")\n    \n        # Act\n        first_page = FirstPage(self.driver)\n        first_page.click_login_button()\n    \n        login_page = LoginPage(self.driver)\n        login_page.fill_login_email_input(self.config['email'])\n        login_page.click_continue_button()\n>       login_page.fill_login_password_input(self.config['password'])\n\ntest\\web\\test_login_valid_account.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogic\\web\\login_page.py:34: in fill_login_password_input\n    WebDriverWait(self._driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e478bfa071302bea37aff0bd0b47b9b9\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000015C63154860>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\pythonProject\\.venv\\Trello_Final_Project\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "06bd4ea4-12c0-43d5-b1db-cf9da6ef3a4e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9b4a2898-0412-4d73-9dba-a1f1c53054c0-attachment.txt", "type": "text/plain"}], "start": 1723238777124, "stop": 1723238797497, "uuid": "e5d72986-5874-42aa-8954-9459624d2f4c", "historyId": "cfb6e8714c236fd3577aaa0eb0b0e18d", "testCaseId": "cfb6e8714c236fd3577aaa0eb0b0e18d", "fullName": "test.web.test_login_valid_account.SuccessfulLoginTest#test_login_successful", "labels": [{"name": "feature", "value": "Login Test - valid account + password"}, {"name": "story", "value": "Successful Login"}, {"name": "parentSuite", "value": "test.web"}, {"name": "suite", "value": "test_login_valid_account"}, {"name": "subSuite", "value": "SuccessfulLoginTest"}, {"name": "host", "value": "DESKTOP-OPJ94K2"}, {"name": "thread", "value": "22876-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.web.test_login_valid_account"}]}