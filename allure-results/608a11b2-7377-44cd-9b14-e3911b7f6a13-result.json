{"name": "test_create_board", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_create_new_board.NewBoardTest testMethod=test_create_board>\n\n    def setUp(self):\n        # Arrange\n        self.browser = BrowserWrapper()\n        self.config = ConfigProvider.load_from_file()\n        self.secret = ConfigProvider.load_from_secret()\n        self.driver = self.browser.get_driver(self.config['url'])\n        FirstPage(self.driver).click_login_button()\n>       LoginPage(self.driver).login_flow(self.config['email'], self.config['password'])\n\ntest\\web_and_api\\test_create_new_board.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogic\\web\\login_page.py:61: in login_flow\n    self.fill_login_password_input(password)\nlogic\\web\\login_page.py:34: in fill_login_password_input\n    WebDriverWait(self._driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"acb3312e669c44b2211407a05695efc0\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001D00FE61E40>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\pythonProject\\.venv\\Trello_Final_Project\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "\n            This test verifies the creation of a new board via the UI and does teardown via API.\n            ", "attachments": [{"name": "log", "source": "79f06e44-eeaa-4350-9f69-7287a7070f7c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f0016a36-5759-4995-a70f-6ab14ea44a43-attachment.txt", "type": "text/plain"}], "start": 1723365711230, "stop": 1723365729034, "uuid": "2f17e37f-2d88-4ef8-b7b9-787e3311354d", "historyId": "5f303d15ac935b0a513c0f2f1505f2a0", "testCaseId": "5f303d15ac935b0a513c0f2f1505f2a0", "fullName": "test.web_and_api.test_create_new_board.NewBoardTest#test_create_board", "labels": [{"name": "story", "value": "Create New Board"}, {"name": "feature", "value": "Board Management"}, {"name": "parentSuite", "value": "test.web_and_api"}, {"name": "suite", "value": "test_create_new_board"}, {"name": "subSuite", "value": "NewBoardTest"}, {"name": "host", "value": "DESKTOP-OPJ94K2"}, {"name": "thread", "value": "21424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.web_and_api.test_create_new_board"}]}